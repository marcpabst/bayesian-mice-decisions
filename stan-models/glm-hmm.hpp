
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace glm_hmm_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 89> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 74, column 4 to column 18)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 75, column 4 to column 25)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 77, column 4 to column 24)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 85, column 2 to column 26)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 88, column 4 to column 16)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 91, column 6 to column 20)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 92, column 13 to column 15)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 92, column 17 to column 18)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 92, column 6 to column 49)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 94, column 22 to column 24)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 94, column 13 to column 14)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 94, column 16 to column 17)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 94, column 6 to column 26)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 96, column 13 to column 15)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 96, column 6 to column 35)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 97, column 13 to column 14)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 97, column 16 to column 18)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 97, column 6 to column 26)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 101, column 10 to column 47)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 102, column 10 to column 73)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 100, column 23 to line 103, column 9)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 100, column 8 to line 103, column 9)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 99, column 22 to line 104, column 7)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 99, column 6 to line 104, column 7)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 107, column 6 to column 69)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 109, column 6 to column 21)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 89, column 18 to line 110, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 89, column 4 to line 110, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 87, column 2 to line 111, column 3)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 117, column 8 to column 39)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 119, column 8 to column 34)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 116, column 19 to line 120, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 116, column 4 to line 120, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 123, column 6 to column 33)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 122, column 18 to line 124, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 122, column 4 to line 124, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 59, column 4 to column 21)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 60, column 10 to column 11)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 60, column 4 to column 13)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 62, column 4 to column 21)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 65, column 4 to column 21)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 66, column 4 to column 21)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 67, column 4 to column 21)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 69, column 10 to column 11)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 69, column 4 to column 13)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 70, column 11 to column 12)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 70, column 14 to column 15)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 70, column 4 to column 19)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 74, column 12 to column 13)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 75, column 22 to column 23)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 75, column 11 to column 12)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 77, column 21 to column 22)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 77, column 12 to column 13)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 85, column 9 to column 10)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 6, column 4 to column 27)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 7, column 4 to column 27)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 10, column 22 to column 23)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 10, column 11 to column 12)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 10, column 13 to column 14)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 10, column 4 to column 25)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 11, column 11 to column 12)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 11, column 4 to column 21)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 14, column 6 to column 29)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 18, column 10 to column 41)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 17, column 23 to line 19, column 9)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 17, column 8 to line 19, column 9)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 16, column 21 to line 20, column 7)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 16, column 6 to line 20, column 7)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 13, column 19 to line 21, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 13, column 4 to line 21, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 23, column 23 to column 24)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 23, column 11 to column 12)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 23, column 4 to column 26)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 24, column 13 to column 14)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 24, column 4 to column 16)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 27, column 6 to column 47)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 26, column 18 to line 28, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 26, column 4 to line 28, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 33, column 10 to column 67)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 32, column 23 to line 34, column 9)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 32, column 8 to line 34, column 9)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 35, column 8 to column 42)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 31, column 21 to line 36, column 7)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 31, column 6 to line 36, column 7)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 30, column 19 to line 37, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 30, column 4 to line 37, column 5)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 39, column 4 to column 20)",
 " (in '/Users/marcpabst/Documents/Repositories/bayesian-mice-decisions/stan-models/glm-hmm.stan', line 4, column 56 to line 40, column 3)"};


template <typename T0__, typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
stan::value_type_t<T2__>>, -1, 1>>
forward(const T0__& log_b_arg__,
        const std::vector<Eigen::Matrix<T1__, -1, -1>>& A,
        const T2__& pi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          stan::value_type_t<T2__>>;
  int current_statement__ = 0; 
  const auto& log_b = to_ref(log_b_arg__);
  const auto& pi = to_ref(pi_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 55;
    K = rvalue(dims(log_b), "dims(log_b)", index_uni(1));
    int T;
    T = std::numeric_limits<int>::min();
    
    current_statement__ = 56;
    T = rvalue(dims(log_b), "dims(log_b)", index_uni(2));
    current_statement__ = 57;
    validate_non_negative_index("log_A", "T", T);
    current_statement__ = 58;
    validate_non_negative_index("log_A", "K", K);
    current_statement__ = 59;
    validate_non_negative_index("log_A", "K", K);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> log_A;
    log_A = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(T, Eigen::Matrix<local_scalar_t__, -1, -1>(K, K));
    stan::math::fill(log_A, DUMMY_VAR__);
    
    current_statement__ = 61;
    validate_non_negative_index("log_pi", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_pi;
    log_pi = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(log_pi, DUMMY_VAR__);
    
    current_statement__ = 70;
    for (int i = 1; i <= K; ++i) {
      current_statement__ = 63;
      assign(log_pi, stan::math::log(rvalue(pi, "pi", index_uni(i))),
        "assigning variable log_pi", index_uni(i));
      current_statement__ = 68;
      for (int j = 1; j <= K; ++j) {
        current_statement__ = 66;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 64;
          assign(log_A,
            stan::math::log(
              rvalue(rvalue(A, "A", index_uni(t)), "A[t]",
                index_uni(i), index_uni(j))),
            "assigning variable log_A", index_uni(t), index_uni(i),
                                          index_uni(j));
        }
      }
    }
    current_statement__ = 71;
    validate_non_negative_index("logalpha", "K", K);
    current_statement__ = 72;
    validate_non_negative_index("logalpha", "T", T);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> logalpha;
    logalpha = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(T));
    stan::math::fill(logalpha, DUMMY_VAR__);
    
    current_statement__ = 74;
    validate_non_negative_index("acc", "K", K);
    std::vector<local_scalar_t__> acc;
    acc = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
    
    current_statement__ = 78;
    for (int j = 1; j <= K; ++j) {
      current_statement__ = 76;
      assign(logalpha,
        (rvalue(log_pi, "log_pi", index_uni(j)) +
          rvalue(log_b, "log_b", index_uni(j), index_uni(1))),
        "assigning variable logalpha", index_uni(j), index_uni(1));
    }
    current_statement__ = 86;
    for (int t = 2; t <= T; ++t) {
      current_statement__ = 84;
      for (int j = 1; j <= K; ++j) {
        current_statement__ = 81;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 79;
          assign(acc,
            ((rvalue(logalpha, "logalpha", index_uni(i), index_uni((t - 1)))
               +
               rvalue(rvalue(log_A, "log_A", index_uni(t)), "log_A[t]",
                 index_uni(i), index_uni(j))) +
              rvalue(log_b, "log_b", index_uni(j), index_uni(t))),
            "assigning variable acc", index_uni(i));
        }
        current_statement__ = 82;
        assign(logalpha, log_sum_exp(acc),
          "assigning variable logalpha", index_uni(j), index_uni(t));
      }
    }
    current_statement__ = 87;
    return logalpha;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct forward_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
stan::value_type_t<T2__>>, -1, 1>>
operator()(const T0__& log_b,
           const std::vector<Eigen::Matrix<T1__, -1, -1>>& A, const T2__& pi,
           std::ostream* pstream__)  const 
{
return forward(log_b, A, pi, pstream__);
}
};

class glm_hmm_model final : public model_base_crtp<glm_hmm_model> {

 private:
  int N;
  std::vector<int> T;
  int K;
  int I;
  int R;
  int M;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> x__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> x{nullptr, 0, 0};
 
 public:
  ~glm_hmm_model() { }
  
  inline std::string model_name() const final { return "glm_hmm_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  glm_hmm_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "glm_hmm_model_namespace::glm_hmm_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 37;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 38;
      validate_non_negative_index("T", "N", N);
      current_statement__ = 39;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      T = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 39;
      T = context__.vals_i("T");
      current_statement__ = 40;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 40;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      
      current_statement__ = 41;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 41;
      check_greater_or_equal(function__, "I", I, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization","R","int",
           std::vector<size_t>{});
      R = std::numeric_limits<int>::min();
      
      current_statement__ = 42;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 42;
      check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 43;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 43;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 43;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 44;
      validate_non_negative_index("y", "I", I);
      current_statement__ = 45;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(I)});
      y = std::vector<int>(I, std::numeric_limits<int>::min());
      
      current_statement__ = 45;
      y = context__.vals_i("y");
      current_statement__ = 46;
      validate_non_negative_index("x", "I", I);
      current_statement__ = 47;
      validate_non_negative_index("x", "M", M);
      current_statement__ = 48;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(M)});
      x__ = Eigen::Matrix<double, -1, -1>(I, M);
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(x__.data(), I, M);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 48;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 48;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 48;
            assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 48;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 49;
      validate_positive_index("pi", "K", K);
      current_statement__ = 50;
      validate_non_negative_index("betas_x", "K", K);
      current_statement__ = 51;
      validate_non_negative_index("betas_x", "M", M);
      current_statement__ = 52;
      validate_non_negative_index("baseA", "K", K);
      current_statement__ = 53;
      validate_positive_index("baseA", "K", K);
      current_statement__ = 54;
      validate_non_negative_index("log_like_sess", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = (K - 1) + (K * M) + (K * (K - 1));
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "glm_hmm_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> pi;
      pi = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(pi, DUMMY_VAR__);
      
      current_statement__ = 1;
      pi = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
             lp__, K);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> betas_x;
      betas_x = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(M));
      stan::math::fill(betas_x, DUMMY_VAR__);
      
      current_statement__ = 2;
      betas_x = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                  K, M);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> baseA;
      baseA = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(K));
      stan::math::fill(baseA, DUMMY_VAR__);
      
      current_statement__ = 3;
      baseA = in__.template read_constrain_simplex<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, jacobian__>(
                lp__, K, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_like_sess;
      log_like_sess = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(log_like_sess, DUMMY_VAR__);
      
      {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 5;
        pos = 1;
        current_statement__ = 28;
        for (int n = 1; n <= N; ++n) {
          int T_;
          T_ = std::numeric_limits<int>::min();
          
          current_statement__ = 6;
          T_ = rvalue(T, "T", index_uni(n));
          current_statement__ = 7;
          validate_non_negative_index("x_", "T_", T_);
          current_statement__ = 8;
          validate_non_negative_index("x_", "M", M);
          Eigen::Matrix<local_scalar_t__, -1, -1> x_;
          x_ = Eigen::Matrix<local_scalar_t__, -1, -1>(T_, M);
          stan::math::fill(x_, DUMMY_VAR__);
          
          current_statement__ = 9;
          assign(x_, block(x, pos, 1, T_, M), "assigning variable x_");
          current_statement__ = 10;
          validate_non_negative_index("A_", "T_", T_);
          current_statement__ = 11;
          validate_non_negative_index("A_", "K", K);
          current_statement__ = 12;
          validate_non_negative_index("A_", "K", K);
          std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> A_;
          A_ = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(T_, Eigen::Matrix<local_scalar_t__, -1, -1>(K, K));
          stan::math::fill(A_, DUMMY_VAR__);
          
          current_statement__ = 14;
          validate_non_negative_index("y_", "T_", T_);
          std::vector<int> y_;
          y_ = std::vector<int>(T_, std::numeric_limits<int>::min());
          
          current_statement__ = 15;
          assign(y_, rvalue(y, "y", index_min_max(pos, ((pos + T_) - 1))),
            "assigning variable y_");
          current_statement__ = 16;
          validate_non_negative_index("logb_", "K", K);
          current_statement__ = 17;
          validate_non_negative_index("logb_", "T_", T_);
          Eigen::Matrix<local_scalar_t__, -1, -1> logb_;
          logb_ = Eigen::Matrix<local_scalar_t__, -1, -1>(K, T_);
          stan::math::fill(logb_, DUMMY_VAR__);
          
          current_statement__ = 24;
          for (int t = 1; t <= T_; ++t) {
            current_statement__ = 22;
            for (int i = 1; i <= K; ++i) {
              current_statement__ = 19;
              assign(A_,
                to_row_vector(
                  rvalue(baseA, "baseA", index_uni(i), index_omni())),
                "assigning variable A_", index_uni(t), index_uni(i),
                                           index_omni());
              current_statement__ = 20;
              assign(logb_,
                bernoulli_logit_lpmf<false>(rvalue(y_, "y_", index_uni(t)),
                  multiply(rvalue(x_, "x_", index_uni(t)),
                    rvalue(betas_x, "betas_x", index_uni(i)))),
                "assigning variable logb_", index_uni(i), index_uni(t));
            }
          }
          current_statement__ = 25;
          assign(log_like_sess,
            log_sum_exp(
              rvalue(forward(logb_, A_, pi, pstream__),
                "forward(logb_, A_,\npi)", index_omni(), index_uni(T_))),
            "assigning variable log_like_sess", index_uni(n));
          current_statement__ = 26;
          pos = (pos + T_);
        }
      }
      {
        current_statement__ = 33;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 30;
          lp_accum__.add(
            dirichlet_lpdf<propto__>(
              rvalue(baseA, "baseA", index_uni(k), index_omni()),
              (Eigen::Matrix<double,1,-1>(2) << 1, 10).finished()));
          current_statement__ = 31;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(betas_x, "betas_x", index_uni(k)),
              0, 2));
        }
        current_statement__ = 36;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 34;
          lp_accum__.add(rvalue(log_like_sess, "log_like_sess", index_uni(n)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "glm_hmm_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> pi;
      pi = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(pi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      pi = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
             lp__, K);
      std::vector<Eigen::Matrix<double, -1, 1>> betas_x;
      betas_x = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(betas_x, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      betas_x = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                  K, M);
      std::vector<Eigen::Matrix<double, -1, 1>> baseA;
      baseA = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(baseA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      baseA = in__.template read_constrain_simplex<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, jacobian__>(
                lp__, K, K);
      Eigen::Matrix<double, -1, 1> log_like_sess;
      log_like_sess = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(log_like_sess, std::numeric_limits<double>::quiet_NaN());
      
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(pi[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(betas_x[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(baseA[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 5;
        pos = 1;
        current_statement__ = 28;
        for (int n = 1; n <= N; ++n) {
          int T_;
          T_ = std::numeric_limits<int>::min();
          
          current_statement__ = 6;
          T_ = rvalue(T, "T", index_uni(n));
          current_statement__ = 7;
          validate_non_negative_index("x_", "T_", T_);
          current_statement__ = 8;
          validate_non_negative_index("x_", "M", M);
          Eigen::Matrix<double, -1, -1> x_;
          x_ = Eigen::Matrix<double, -1, -1>(T_, M);
          stan::math::fill(x_, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 9;
          assign(x_, block(x, pos, 1, T_, M), "assigning variable x_");
          current_statement__ = 10;
          validate_non_negative_index("A_", "T_", T_);
          current_statement__ = 11;
          validate_non_negative_index("A_", "K", K);
          current_statement__ = 12;
          validate_non_negative_index("A_", "K", K);
          std::vector<Eigen::Matrix<double, -1, -1>> A_;
          A_ = std::vector<Eigen::Matrix<double, -1, -1>>(T_, Eigen::Matrix<double, -1, -1>(K, K));
          stan::math::fill(A_, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 14;
          validate_non_negative_index("y_", "T_", T_);
          std::vector<int> y_;
          y_ = std::vector<int>(T_, std::numeric_limits<int>::min());
          
          current_statement__ = 15;
          assign(y_, rvalue(y, "y", index_min_max(pos, ((pos + T_) - 1))),
            "assigning variable y_");
          current_statement__ = 16;
          validate_non_negative_index("logb_", "K", K);
          current_statement__ = 17;
          validate_non_negative_index("logb_", "T_", T_);
          Eigen::Matrix<double, -1, -1> logb_;
          logb_ = Eigen::Matrix<double, -1, -1>(K, T_);
          stan::math::fill(logb_, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 24;
          for (int t = 1; t <= T_; ++t) {
            current_statement__ = 22;
            for (int i = 1; i <= K; ++i) {
              current_statement__ = 19;
              assign(A_,
                to_row_vector(
                  rvalue(baseA, "baseA", index_uni(i), index_omni())),
                "assigning variable A_", index_uni(t), index_uni(i),
                                           index_omni());
              current_statement__ = 20;
              assign(logb_,
                bernoulli_logit_lpmf<false>(rvalue(y_, "y_", index_uni(t)),
                  multiply(rvalue(x_, "x_", index_uni(t)),
                    rvalue(betas_x, "betas_x", index_uni(i)))),
                "assigning variable logb_", index_uni(i), index_uni(t));
            }
          }
          current_statement__ = 25;
          assign(log_like_sess,
            log_sum_exp(
              rvalue(forward(logb_, A_, pi, pstream__),
                "forward(logb_, A_,\npi)", index_omni(), index_uni(T_))),
            "assigning variable log_like_sess", index_uni(n));
          current_statement__ = 26;
          pos = (pos + T_);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(log_like_sess[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> pi;
      pi = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(pi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> pi_flat__;
        current_statement__ = 1;
        pi_flat__ = context__.vals_r("pi");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          assign(pi, pi_flat__[(pos__ - 1)],
            "assigning variable pi", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> pi_free__;
      pi_free__ = Eigen::Matrix<double, -1, 1>((K - 1));
      stan::math::fill(pi_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(pi_free__, stan::math::simplex_free(pi),
        "assigning variable pi_free__");
      std::vector<Eigen::Matrix<double, -1, 1>> betas_x;
      betas_x = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(betas_x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> betas_x_flat__;
        current_statement__ = 2;
        betas_x_flat__ = context__.vals_r("betas_x");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 2;
            assign(betas_x, betas_x_flat__[(pos__ - 1)],
              "assigning variable betas_x", index_uni(sym2__),
                                              index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> baseA;
      baseA = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(baseA, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> baseA_flat__;
        current_statement__ = 3;
        baseA_flat__ = context__.vals_r("baseA");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 3;
            assign(baseA, baseA_flat__[(pos__ - 1)],
              "assigning variable baseA", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> baseA_free__;
      baseA_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(
        (K - 1)));
      stan::math::fill(baseA_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        assign(baseA_free__, stan::math::simplex_free(baseA[(sym1__ - 1)]),
          "assigning variable baseA_free__", index_uni(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
        vars__.emplace_back(pi_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(betas_x[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= (K - 1); ++sym2__) {
          vars__.emplace_back(baseA_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"pi", "betas_x", "baseA",
      "log_like_sess"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(K)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas_x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "baseA" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_like_sess" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betas_x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "baseA" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_like_sess" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"betas_x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"parameters\"},{\"name\":\"baseA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"log_like_sess\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((K - 1)) + "},\"block\":\"parameters\"},{\"name\":\"betas_x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"parameters\"},{\"name\":\"baseA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((K - 1)) + "}},\"block\":\"parameters\"},{\"name\":\"log_like_sess\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = glm_hmm_model_namespace::glm_hmm_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return glm_hmm_model_namespace::profiles__;
}

#endif


